@{
	ViewData["Title"] = "Ustawienia";
	Layout = "~/Views/Shared/_LayoutEmpty.cshtml";

	var account = Context.Items["userAccount"] as QuickQuiz.Dto.AccountDTO;
}

@section Stylesheets {
	<link href="https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css" rel="stylesheet" integrity="sha384-wvfXpqpZZVQGK6TAh5PVlGOfQNHSoD2xbE+QkPxCAFlNEevoEH3Sl0sibVcOQVnN" crossorigin="anonymous">
}

@using Microsoft.Extensions.Configuration
@using QuickQuiz.Dto;
@inject IConfiguration Configuration

@{
	await Html.RenderPartialAsync("~/Views/Shared/_NavBar.cshtml");
}

<div class="container mb-5 footer-padding">
	<main role="main" class="pb-3">
		<div class="row">
			<div class="col m-3 border border-secondary border-3 rounded">
				<h5>Zmiana hasła</h5>
				<form class="needs-validation p-2" oninput='up2.setCustomValidity(up2.value != up.value ? "Passwords do not match." : "")' novalidate>
					<div class="mb-1">
						<label for="currentPassword">Obecne hasło</label>
						<input type="password" class="form-control" id="currentPassword" minlength="6" maxlength="64" required>
					</div>
					<div class="mb-1">
						<label for="userPassword">Hasło</label>
						<input type="password" class="form-control" id="userPassword" minlength="6" maxlength="64" name="up" required>
					</div>
					<div class="mb-1">
						<label for="userRePassword">Powtórz hasło</label>
						<input type="password" class="form-control" minlength="6" maxlength="64" name="up2" id="userRePassword" required>
					</div>
					<div class="mb-1">
						<button type="submit" data-buttontype="password" class="btn btn-primary mt-2">Zmień hasło</button>
					</div>
				</form>
			</div>
			<div class="col m-3 border border-secondary border-3 rounded">
				<h5>Zmiana nazwy użytkownika</h5>
				<form class="needs-validation p-2" novalidate>
					<div class="mb-1">
						<label for="currentPassword2">Obecne hasło</label>
						<input type="password" class="form-control" id="currentPassword2" minlength="6" maxlength="64" required>
					</div>
					<div class="mb-1">
						<label for="userName">Nazwa użytkownika</label>
						<input type="text" class="form-control" id="userName" value="@account.Username" minlength="3" maxlength="25" pattern="^[a-zA-Z][a-zA-Z0-9_]*(?: [a-zA-Z0-9]+)?$" required>
					</div>
					<div class="mb-1">
						<button type="submit" data-buttontype="username" class="btn btn-primary mt-2">Zmień nazwe</button>
					</div>
				</form>
			</div>
			<div class="col m-3 border border-secondary border-3 rounded">
				<h5>Twoje preferencje</h5>
				<form class="needs-validation p-2" novalidate>
					<div class="mb-1">
						<label for="usernameColor">Twój kolor (widoczny tylko dla ciebie)</label>
						<input type="color" class="form-control" value="@(account.UserColor == null ? "#e80d7b" : account.UserColor)" id="usernameColor" required>
					</div>
					<div class="form-check">
						<input class="form-check-input" type="checkbox" value="" id="privateProfil" @(account.ProfilPrivate ? "checked" : "")>
						<label class="form-check-label text-white" for="privateProfil">
							Profil prywatny
						</label>
					</div>
					<div class="form-check">
						<input class="form-check-input" type="checkbox" value="" id="streamerMode" @(account.StreamerMode ? "checked" : "")>
						<label class="form-check-label text-white" for="streamerMode">
							Streamer mode (pokazuje odpowiedzi na sam koniec)
						</label>
					</div>
					<div class="mb-1">
						<button type="submit" data-buttontype="preferences" class="btn btn-primary mt-2">Zastostuj zmiany</button>
					</div>
				</form>
			</div>
		</div>

		<div class="row">
			<h5 class="text-center">Połączenia</h5>
			<table id="accountConnectionsTable" class="table table-dark table-striped">
				<thead>
					<tr>
						<th scope="col">#</th>
						<th scope="col">Dostawca</th>
						<th scope="col">Identyfikator</th>
						<th scope="col">Użytkownik</th>
						<th scope="col">Akcja</th>
					</tr>
				</thead>
				<tbody>

					@foreach (var connection in account.Connections)
					{
						<tr>
							@if (connection.Type == "Twitch")
							{
								var twitchConnection = (TwitchConnectionDTO)connection;

								<th scope="row" data-connection-type="@connection.Type">
									<i height="32" width="32" class="d-inline-block" style="height: 32px; width: 32px;"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path fill="#7212ff" d="M391.17,103.47H352.54v109.7h38.63ZM285,103H246.37V212.75H285ZM120.83,0,24.31,91.42V420.58H140.14V512l96.53-91.42h77.25L487.69,256V0ZM449.07,237.75l-77.22,73.12H294.61l-67.6,64v-64H140.14V36.58H449.07Z"></path></svg></i>
								</th>
								<td>@connection.Type</td>
								<td>@twitchConnection.UserId</td>
								<td>@twitchConnection.Displayname</td>
								<td><i title="Rozłącz" role="button" onclick="removeAccountConnection(this)" class="fa fa-lg fa-trash"></i></td>
							}
							else
							{
								<th scope="row" data-connection-type="@connection.Type"></th>
								<td>@connection.Type</td>
								<td></td>
								<td></td>
								<td></td>
							}
						</tr>
					}

				</tbody>
			</table>
			<a id="twitchConnectionButton" class="d-none btn btn-primary mt-2" href="https://id.twitch.tv/oauth2/authorize?response_type=code&client_id=@Configuration["Twitch:ClientId"]&redirect_uri=@Url.Action("TwitchLogin", "Login", null, Context.Request.Scheme)&scope=user%3Aread%3Aemail" role="button">
				<i height="18" width="18" class="d-inline-block" style="height: 18px; width: 18px;"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path fill="#7212ff" d="M391.17,103.47H352.54v109.7h38.63ZM285,103H246.37V212.75H285ZM120.83,0,24.31,91.42V420.58H140.14V512l96.53-91.42h77.25L487.69,256V0ZM449.07,237.75l-77.22,73.12H294.61l-67.6,64v-64H140.14V36.58H449.07Z"></path></svg></i>
				<span>Połącz konto z Twitch</span>
			</a>
		</div>
	</main>
</div>

@section Scripts {
	<script>
		const changePasswordUrl = '@Url.Action("ChangePassword", "Home")';
		const changeUsernameUrl = '@Url.Action("ChangeUsername", "Home")';
		const setPreferencesUrl = '@Url.Action("SetUserPreferences", "Home")';	
		const removeAccountConnectionUrl = '@Url.Action("RemoveAccountConnection", "Home")';
	</script>
	<script src="~/js/common.js"></script>
	<script src="~/js/settings.js"></script>
}